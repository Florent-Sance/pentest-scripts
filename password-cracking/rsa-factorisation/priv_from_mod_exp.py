#!/usr/bin/python

import functions
import sys
import os

modulus = int(sys.argv[1])
exp =  int(sys.argv[2])

get_priv_key_args = ""

if modulus == 188198812920607963838697239461650439807163563379417382700763356422988859715234665485319060606504743045317388011303396716199692321205734031879550656996221305168759307650257059:
	print "Modulus from RSA-576 factorization challenge"
	get_priv_key_args += "398075086424064937397125500550386491199064362342526708406385189575946388957261768583317 472772146107435302536223071973048224632914695302097116459852171130520711256363590397527 "
elif modulus == 310741824049004372135075003588856793003734602284272754572016194882320644051808150455634682967172328678243791627283803341547107310850191954852900733772482278352574238645401469173660247765234660:
	print "Modulus from RSA-640 factorization challenge"
	get_priv_key_args += "1634733645809253848443133883865090859841783670033092312181110852389333100104508151212118167511579 1900871281664822113126851573935413975471896789968515493666638539088027103802104498957191261465571 "
elif modulus == 74037563479561712828046796097429573142593188889231289084936232638972765034028266276891996419625117843995894330502127585370118968098286733173273108930900552505116877063299072396380786710086096962537934650563796359:
	print "Modulus from RSA-704 factorization challenge"
	get_priv_key_args += "9091213529597818878440658302600437485892608310328358720428512168960411528640933367824950788367956756806141 8143859259110045265727809126284429335877899002167627883200914172429324360133004116702003240828777970252499 "
elif modulus == 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413 :
	print "Modulus from RSA-768 factorization challenge"
	get_priv_key_args += "33478071698956898786044169848212690817704794983713768568912431388982883793878002287614711652531743087737814467999489 36746043666799590428244633799627952632279158164343087642676032283815739666511279233373417143396810270092798736308917 "
else:
	print "Low prime numbers attack"

	condition = False
	for elmt in os.listdir('prime_numbers'):
		if condition:
			break
		for number in open('prime_numbers/' + elmt):
			if modulus%int(number.rstrip()) == 0:
				get_priv_key_args += number.rstrip() + " " + str(modulus/int(number.rstrip())) + " "
				condition = True
		       		break


	if len(str(modulus)) < 312 and get_priv_key_args == "":
		print "Low prime number failed"
		print "MSIEVE Attack"
		os.system(functions.msieve() + " -v " + str(modulus) + " > factor.txt")
		for line in open('factor.txt').readlines():
			if line.partition(" factor:")[1] == " factor:":
				get_priv_key_args += line.partition(" factor:")[2].rstrip() + " "
	else:
		print "MSIEVE Attack not possible"

get_priv_key_args += str(exp)
print get_priv_key_args

print "Generate private key"
os.system(functions.get_priv_key()  + " " + get_priv_key_args + " > rsa_hacked_key.pem")
