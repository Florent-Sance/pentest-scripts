import argparse

badFunctions = []
for elmt in open("badfunctions.txt").readlines():
	if elmt[0] != "#" and elmt.rstrip() != '':
		badFunctions.append(elmt.rstrip().lower())

#For AS3 only
HTTPVarLoaderName = ""

HTMLShowBad = ["//Have a look here\n<strong cloro=\"red\">","</strong>"]
numberFound = 0
parser = argparse.ArgumentParser(description='Show potential entry points in ActionScript Code')
parser.add_argument('flashcode', help='Flash code')
parser.add_argument('-o','--output', help='Output file', default='', required=False)
args = vars(parser.parse_args())

flashCodeFilename = args['flashcode'].split('/')[-1]
htmlTitle = "<title>Analyze of " + flashCodeFilename + "</title>"
htmlResult = "<html><head>"
htmlResult += htmlTitle
htmlResult += "</head><body><pre>"
for elmt in open(args['flashcode']).readlines():
	line = elmt.lower().rstrip()
	patternFound = False
	
	for pattern in badFunctions:
		#using partition is durty but faster than re for regex
		if line.partition(pattern)[1] == pattern:
			htmlResult += HTMLShowBad[0] + elmt.rstrip() + HTMLShowBad[1] + "\n"
			patternFound = True
			break
		elif line.partition("_root.")[1] == "_root.":
			htmlResult += HTMLShowBad[0] + elmt.rstrip() + HTMLShowBad[1] + "\n"
			patternFound = True
			break
		#Remove space because of ( ) in code
		elif line.replace(" ", "").partition("loaderinfo(this.root.loaderinfo).parameters")[1] == "LoaderInfo(this.root.loaderInfo).parameters":
			htmlResult += HTMLShowBad[0] + elmt.rstrip() + HTMLShowBad[1] + "\n"
			HTTPVarLoaderName = line.partition("var")[2].partition(":object")[0].replace(" ", "")
			patternFound = True
			break
		elif HTTPVarLoaderName != "" and line.partition(HTTPVarLoaderName + "["):
			htmlResult += HTMLShowBad[0] + elmt.rstrip() + HTMLShowBad[1] + "\n"
			patternFound = True
			break
		
	if patternFound is False:
		htmlResult += elmt
	else:
		numberFound += 1


htmlResult += "</pre></body></html>"

print "Found " + str(numberFound) + " occurrences from patterns."

if args['output'] != '':
	output = open(args['output'], "w+")
	output.write(htmlResult)
	output.close()
	print "Result in " + args['output']
else:
	print htmlResult
